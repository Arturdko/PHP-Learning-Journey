<?php
// üß© –ó–ê–î–ê–ù–ò–ï: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–æ–æ–ø–∞—Ä–∫–æ–º:
print "
<hr><br>------üß© –ó–ê–î–ê–ù–ò–ï 1: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–æ–æ–ø–∞—Ä–∫–æ–º:--------------<br>
<hr>";

// üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
// 1. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å AnimalBehavior
// –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ—Ç–æ–¥ makeSound().
interface AnimalBahavior
{
  public function makeSound();
}


// 2. –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å Animal
// –°–≤–æ–π—Å—Ç–≤–∞: name, age, species
abstract class Animal
{
  public $name;
  public $age;
  public $species;

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ $count ‚Äî –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö
  public static $count = 0;

  // –ù–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ $favoriteFood –≤ Animal
  public $favoriteFood;
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ.

  // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–µ—Ç–æ–¥–µ feed().
  // –ú–µ—Ç–æ–¥ __construct($name, $age, $species)
  public function __construct(string $name, int $age, string $species, string $favoriteFood)
  {
    $this->name = $name;
    $this->age = $age;
    $this->species = $species;
    $this->favoriteFood = $favoriteFood;
    self::$count++;
  }
  // –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ move()
  abstract public function move();

  // 1. –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ feed() –≤ Animal
  // –ö–∞–∂–¥–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –¥–æ–ª–∂–Ω–æ –ø–æ-—Å–≤–æ–µ–º—É —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–æ—Ä–º—ë–∂–∫—É.
  abstract public function feed();

  // –ú–µ—Ç–æ–¥ info() ‚Äî –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∏–≤–æ—Ç–Ω–æ–º
  public function info()
  {
    echo "$this->name is $this->species and is $this->age years old<br>";
  }

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ getCount()
  public static function getCount()
  {
    echo "Total animals in ZOO: " . self::$count . "<br>";
  }

  // –ú–µ—Ç–æ–¥ __destruct() ‚Äî —É–º–µ–Ω—å—à–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
  public function __destruct()
  {
    self::$count--;
  }
}


// 3. –¢—Ä–µ–π—Ç Logger
// –ú–µ—Ç–æ–¥ log($message) ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞ [LOG]: —Å–æ–æ–±—â–µ–Ω–∏–µ
trait Logger
{
  public function log()
  {
    echo ($this->name . "is eating" . $this->favoriteFood . "<br>");
  }
}

interface Carnivore
{
  public function hunt();
}


// 4. –ö–ª–∞—Å—Å—ã-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏
// –°–æ–∑–¥–∞–π –º–∏–Ω–∏–º—É–º 2 –∫–ª–∞—Å—Å–∞, –Ω–∞—Å–ª–µ–¥—É—é—â–∏—Ö Animal –∏ —Ä–µ–∞–ª–∏–∑—É—é—â–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å AnimalBehavior, –Ω–∞–ø—Ä–∏–º–µ—Ä:
// –û–±–∞ –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–π—Ç—ã –∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥—ã move() –∏ makeSound().

// Eagle
class Eagle extends Animal implements AnimalBahavior
{
  use Logger;

  public function move()
  {
    echo "Eagle flies<br>";
  }

  public function makeSound()
  {
    echo "Eagle make ee<br>";
  }

  public function feed()
  {
    echo "I like to eat: $this->favoriteFood <br>";
  }
}


// Lion
class Lion extends Animal implements AnimalBahavior, Carnivore
{
  use Logger;
  public function move()
  {
    echo "Lion runs<br>";
  }

  public function makeSound()
  {
    echo "Lion roars<br>";
  }

  public function feed()
  {
    echo "I like to eat: $this->favoriteFood<br>";
  }

  public function hunt()
  {
    echo "I like to hunt zebras<br>";
  }
}

// Dog
class Dog extends Animal implements AnimalBahavior
{
  use Logger;
  public function move()
  {
    echo "Dog runs<br>";
  }

  public function makeSound()
  {
    echo "Dog burks<br>";
  }

  public function feed()
  {
    echo "I like to eat: $this->favoriteFood <br>";
  }
}

// Elephant
class Elephant extends Animal implements AnimalBahavior
{
  use Logger;
  public function move()
  {
    echo "Elephant runs<br>";
  }

  public function makeSound()
  {
    echo "Elephant el  i  fuhnt<br>";
  }

  public function feed()
  {
    echo "I like to eat: $this->favoriteFood <br>";
  }
}

// Cat

class Cat extends Animal implements AnimalBahavior, Carnivore
{
  use Logger;
  public function move()
  {
    echo "Cat runs<br>";
  }

  public function makeSound()
  {
    echo "Cat Meaw <br>";
  }

  public function feed()
  {
    echo "I like to eat: $this->favoriteFood <br>";
  }

  public function hunt()
  {
    echo "I like to hunt zebras<br>";
  }
}

// Penguin

class Penguin extends Animal implements AnimalBahavior
{
  use Logger;
  public function move()
  {
    echo "Penguin swims<br>";
  }

  public function makeSound()
  {
    echo "Penguin crowls <br>";
  }

  public function feed()
  {
    echo "I like to eat: $this->favoriteFood <br>";
  }
}

// Tiger

class Tiger extends Animal implements AnimalBahavior, Carnivore
{
  use Logger;
  public function move()
  {
    echo "Tiger runs<br>";
  }

  public function makeSound()
  {
    echo "Tiger roars <br>";
  }

  public function feed()
  {
    echo "I like to eat: $this->favoriteFood <br>";
  }

  public function hunt()
  {
    echo "I like to hunt zebras<br>";
  }
}

// Monkey

class Monkey extends Animal implements AnimalBahavior
{
  use Logger;
  public function move()
  {
    echo "Monkey runs<br>";
  }

  public function makeSound()
  {
    echo "Monkey crowls <br>";
  }

  public function feed()
  {
    echo "I like to eat: $this->favoriteFood <br>";
  }
}

// 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
// –°–æ–∑–¥–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
$lion = new Lion("Simba", 10, "Lion", "zebra");
$eagle = new Eagle("Wind", 7, "Golden Eagle", "mouse");
$dog = new Eagle("Sharik", 6, "Golden Retriever", "chappy");
$elephant = new Elephant("Biggy", 16, "Elephant", "grass");


// –í—ã–∑–æ–≤–∏ –º–µ—Ç–æ–¥—ã move(), makeSound() –∏ info() –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
$lion->move();
$lion->makeSound();
$lion->info();
$lion->feed();
$lion->log();


$eagle->move();
$eagle->makeSound();
$eagle->info();
$eagle->feed();
$eagle->log();

$dog->move();
$dog->makeSound();
$dog->info();
$dog->feed();
$dog->log();

$elephant->move();
$elephant->makeSound();
$elephant->info();
$elephant->feed();
$elephant->log();
// –ü–æ–∫–∞–∂–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö —á–µ—Ä–µ–∑ Animal::getCount()
Animal::getCount();

// –£–¥–∞–ª–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –∏ —Å–Ω–æ–≤–∞ –≤—ã–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
unset($dog);
Animal::getCount();
// üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:
// –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—Å—ë, —á—Ç–æ —Ç—ã —É–∂–µ –∏–∑—É—á–∏–ª:

// –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã

// –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã

// –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã –∏ –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã

// —Ç—Ä–µ–π—Ç—ã

// –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º

// —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –∏ —Å–≤–æ–π—Å—Ç–≤–∞


//üß© –ó–ê–î–ê–ù–ò–ï: –ñ–∏–≤–æ—Ç–Ω—ã–µ –≤ –¥–µ–π—Å—Ç–≤–∏–∏ ‚Äî –µ–¥–∞, –ø–æ–≤–µ–¥–µ–Ω–∏–µ, —É—á—ë—Ç!

// ‚úÖ –ß—Ç–æ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å:


// 5. –ú–∞—Å—Å–∏–≤ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏
// –°–æ–∑–¥–∞–π –º–∞—Å—Å–∏–≤ —Å 4-5 –∂–∏–≤–æ—Ç–Ω—ã–º–∏ (—Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤). –ü—Ä–æ–π–¥–∏ –ø–æ –º–∞—Å—Å–∏–≤—É —Ü–∏–∫–ª–æ–º:

$animals = [
  "Cat" => new Cat("Simon", 3, "Cat", "Phelix"),
  "Penguin" => new Penguin("Eric", 11, "Penguin", "fish"),
  "Tiger" => new Tiger("Sharchan", 8, "Tiger", "horse"),
  "Monket" => new Monkey("Abbu", 5, "Monkey", "banana")
];



foreach ($animals as $animal => $object) {
  echo "---" . $animal . "---" . "<br>";
  $object->info();
  $object->move();
  $object->makeSound();
  $object->feed();

  if ($object instanceof Carnivore) {
    $object->hunt();
  }
}
