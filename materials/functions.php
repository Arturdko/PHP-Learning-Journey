<?php
// –§—É–Ω–∫—Ü–∏–∏:
function greatings($firstname = "John", $lastname = "Doe")
{
  if (isset($_POST["submit"])) {
    $fullname = " " . $firstname . " " . $lastname . "<br>";
    echo $fullname;
  }
}


//greatings($_POST["name"], $_POST["lastname"]);

if (empty($_POST["name"])) {
  greatings();
} else {
  greatings($_POST["name"], $_POST["lastname"]);
}

// –ü—Ä–∞–≤–∏–ª—å–Ω–æ:
function sayHi($name, $greeting = "Hello")
{
  echo "$greeting, $name!";
}


// –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É
function sayHi2($greeting = "Hello", $name)
{
  echo "$greeting, $name!";
}


function printFruits(array $fruits = [])
{
  if (empty($fruits)) {
    echo "No fruits passed.\n";
  } else {
    foreach ($fruits as $fruit) {
      echo $fruit . "\n";
    }
  }
}

printFruits(["Apple", "Banana"]);
printFruits();  // —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤)



function addOne(&$number)
{
  $number++;
}

$value = 5;
addOne($value);
echo $value; // 6



function calculateDiscount($price, $discount = 10): float
{
  return $price - ($price * $discount / 100);
}

$final = calculateDiscount(100);         // 90
$custom = calculateDiscount(200, 25);    // 150

echo "Final price: $final\n";
echo "Custom price: $custom\n";


function example()
{
  return "Done!";
  echo "This will never show.";
}



function checkNumber($n)
{
  if ($n > 0) {
    return "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ";
  } elseif ($n < 0) {
    return "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ";
  } else {
    return "–ù–æ–ª—å";
  }
}

print "<br>----------------------<br>";
echo checkNumber(5);   // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
echo checkNumber(-3);  // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
echo checkNumber(0);   // –ù–æ–ª—å

/*
üî• –ö—Ä–∞—Ç–∫–æ: —á—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ –Ω–µ –Ω–∞–ø–∏—Å–∞—Ç—å return?
‚úÖ –§—É–Ω–∫—Ü–∏—è –≤—Å—ë —Ä–∞–≤–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è

‚ùå –ù–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—ë—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é null)

‚ùå –¢—ã –Ω–µ —Å–º–æ–∂–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏



‚úÖ –ö–æ–≥–¥–∞ return –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω?
–°—Ü–µ–Ω–∞—Ä–∏–π	–ù—É–∂–Ω–æ return?
–•–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é)	‚úÖ –î–∞
–•–æ—á–µ—à—å –ø—Ä–æ—Å—Ç–æ —á—Ç–æ-—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å (echo)	‚ùå –ù–µ—Ç
–§—É–Ω–∫—Ü–∏—è –¥–µ–ª–∞–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è	‚úÖ –î–∞
–§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–ø—Ä–æ—Ü–µ–¥—É—Ä–∞)	‚ùå –ù–µ—Ç

üß† –ù–æ! –ï—Å–ª–∏ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å echo –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –±–µ–∑ return, —Ç—ã –º–æ–∂–µ—à—å —á—Ç–æ-—Ç–æ —É–≤–∏–¥–µ—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ, –Ω–æ —Ç—ã –Ω–µ –ø–æ–ª—É—á–∏—à—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é.

*/

// 1. –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏)
function sayHello()
{
  $name = "Anna";
  echo "Hello, $name!";
}

sayHello();        // –†–∞–±–æ—Ç–∞–µ—Ç
//echo $name;        // ‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π $name –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤–Ω–µ —Ñ—É–Ω–∫—Ü–∏–∏


// üîπ 2. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (global)
// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–µ –≤–Ω–µ —Ñ—É–Ω–∫—Ü–∏–π, –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏, –Ω–æ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–Ω–∏ –Ω–µ –≤–∏–¥–Ω—ã, –ø–æ–∫–∞ —Ç—ã –Ω–µ —É–∫–∞–∂–µ—à—å global.

$name = "Marek";

function greet()
{
  global $name;
  echo "Hello, $name!";
}

greet(); // Hello, Marek

// üß† –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –º–∞—Å—Å–∏–≤ $GLOBALS

$name = "Lena";

function showName()
{
  echo $GLOBALS["name"];
}

showName();


// üîπ 3. static –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
// static ‚Äî —ç—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç —Å–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏.
// –û–±—ã—á–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–Ω—É–ª—è–ª–∞—Å—å –±—ã –∫–∞–∂–¥—ã–π —Ä–∞–∑. static —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ.
function counter()
{
  static $count = 0;
  $count++;
  echo $count . "\n";
}

counter(); // 1
counter(); // 2
counter(); // 3

// üîπ –ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ–∫—É—Ä—Å–∏—è?
// –†–µ–∫—É—Ä—Å–∏—è ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–±, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç —Å–∞–º—É —Å–µ–±—è, –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ (–∏–Ω–∞—á–µ –±—É–¥–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª).

function countdown($n)
{
  if ($n <= 0) {
    return; // –£—Å–ª–æ–≤–∏–µ –≤—ã—Ö–æ–¥–∞
  }

  echo $n . "<br>";
  countdown($n - 1); // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤
}

countdown(5);
/*
5
4
3
2
1
*/


function factorial($n)
{
  if ($n === 0) {
    return 1; // –±–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: 0! = 1
  }
  return $n * factorial($n - 1); // —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤
}

/*
factorial(3)
‚Üí 3 * factorial(2)
    ‚Üí 2 * factorial(1)
        ‚Üí 1 * factorial(0)
            ‚Üí 1  (–±–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π)
        ‚Üí 1 * 1 = 1
    ‚Üí 2 * 1 = 2
‚Üí 3 * 2 = 6
*/