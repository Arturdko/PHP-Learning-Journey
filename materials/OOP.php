<?php
// 1Ô∏è‚É£ –ö–ª–∞—Å—Å—ã –∏ –æ–±—ä–µ–∫—Ç—ã
// –ö—Ä–∞—Ç–∫–æ: –ö–ª–∞—Å—Å ‚Äî —ç—Ç–æ —à–∞–±–ª–æ–Ω, –æ–±—ä–µ–∫—Ç ‚Äî —ç—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä —ç—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.

// —Å–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å —Å –∏–º–µ–Ω–µ–º Car
class Car1
{
  public $color;     // —ç—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞)
  public $brand;     // –µ—â—ë –æ–¥–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ

  public function drive()
  { // –º–µ—Ç–æ–¥ (—Ñ—É–Ω–∫—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞)
    echo "The car is driving\n";
  }
}

// —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç (—ç–∫–∑–µ–º–ø–ª—è—Ä) –∫–ª–∞—Å—Å–∞ Car
$myCar = new Car1();

// —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤
$myCar->color = "red";
$myCar->brand = "Toyota";

// –≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
echo "My car is a " . $myCar->color . " " . $myCar->brand . "\n";

// –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥
$myCar->drive();




class Dog1
{
  public $name;

  public function bark()
  {
    echo "Woof!\n";
  }
}

$dog = new Dog1();
$dog->name = "Rex";
echo $dog->name . " says: ";
$dog->bark();

// üìù –ü–æ–ø—Ä–æ–±—É–π —Å–∞–º: —Å–æ–∑–¥–∞–π –∫–ª–∞—Å—Å Person —Å –ø–æ–ª–µ–º $name –∏ –º–µ—Ç–æ–¥–æ–º sayHello(), –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç "Hello, my name is NAME".

class Person
{
  public $name;

  public function sayHello()
  {
    echo "<br>Hello, my name is $this->name<br>";
  }
}

$person = new Person;
$person->name = 'Artur';
$person->sayHello();
var_dump($person);

// 2Ô∏è‚É£ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (__construct)
// –ö—Ä–∞—Ç–∫–æ: –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞.

class UserConstr
{
  public $username;

  public function __construct($name)
  {
    $this->username = $name;
  }

  public function greet()
  {
    echo "Hello, " . $this->username . "!\n";
  }
}

$user = new UserConstr("Alice");
$user->greet();


// üìù –°–¥–µ–ª–∞–π –∫–ª–∞—Å—Å Book —Å –ø–æ–ª—è–º–∏ title –∏ author, –ø–µ—Ä–µ–¥–∞–≤–∞–π –∏—Ö –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ.

class Book
{
  public $title;
  public $author;

  public function __construct($title, $author)
  {
    $this->title = $title;
    $this->author = $author;
  }

  public function whole_name()
  {
    echo "You are reading " . $this->title . " by " . $this->author . "<br>";
  }
}

$book = new Book("1984", "Jorge Oruel");
$book->whole_name();


// 3Ô∏è‚É£ –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (extends)
// –ö—Ä–∞—Ç–∫–æ: –û–¥–∏–Ω –∫–ª–∞—Å—Å –º–æ–∂–µ—Ç "–Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å" –¥—Ä—É–≥–æ–π –∏ –±—Ä–∞—Ç—å –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã.

class Animaly
{
  public function makeSound()
  {
    echo "Some generic sound\n";
  }
}

class Cat extends Animaly
{
  public function makeSound()
  {
    echo "Meow\n";
  }
}

$cat = new Cat();
$cat->makeSound(); // Meow


// üìù –°–¥–µ–ª–∞–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å Employee –∏ –¥–æ—á–µ—Ä–Ω–∏–π Manager, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ approveLeave().

class Employee
{
  public $name;

  public function __construct($name)
  {
    $this->name = $name;
  }
  public function go_on_vacation()
  {
    echo "$this->name can go";
  }
}


class Manager extends Employee
{
  public function go_on_vacation()
  {
    echo "You have my approvement.";
  }
}

$employee = new Manager("Jack");
$employee->go_on_vacation();


// 4Ô∏è‚É£ –ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è (–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–æ—Å—Ç—É–ø–∞)
// –ö—Ä–∞—Ç–∫–æ: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º/–º–µ—Ç–æ–¥–∞–º.

// public ‚Äî –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º

// private ‚Äî –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞

// protected ‚Äî –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–ª–∞—Å—Å–µ –∏ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö


class BankAccount
{
  private $balance = 0;

  public function deposit($amount)
  {
    $this->balance += $amount;
  }

  public function getBalance()
  {
    return $this->balance;
  }
}

$acc = new BankAccount();
$acc->deposit(1000);
echo $acc->getBalance(); // 1000

// üìù –ü–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π –∫–ª–∞—Å—Å Wallet —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º –∏ –º–µ—Ç–æ–¥–∞–º–∏ addMoney() –∏ getBalance().

class Wallet
{
  private $balance = 0;

  public function addMoney($summ)
  {
    $this->balance += $summ;
  }

  public function getBalance()
  {
    return $this->balance . " EUR";
  }
}

$my_wallet = new Wallet();
$my_wallet->addMoney(31245);
echo "<br>" . $my_wallet->getBalance();
unset($my_wallet);
//echo "<br>" . $my_wallet->getBalance();


// __construct() and __destruct()

class Test
{
  // __construct() –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é.
  public function __construct()
  {
    $mess = "THIS MESSAGE IS FROM __CONSTRUCT FUNCTION!!!";
    return $mess;
  }

  // __destruct() –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
  public function __destruct()
  {
    echo "THIS MESSAGE IS FROM __DESTRUCT FUNCTION!!!üí•";
  }
}

//$test = new Test();
//echo $test->__construct();
// ‚ö†Ô∏è –ü–æ—á–µ–º—É –Ω–µ —Å—Ç–æ–∏—Ç —Ç–∞–∫ –¥–µ–ª–∞—Ç—å:
// __construct() ‚Äî —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞. –†—É—á–Ω–æ–π –≤—ã–∑–æ–≤ –º–æ–∂–µ—Ç –∑–∞–ø—É—Ç–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–∞–º, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ —Ç—ã —É–∂–µ —Å–æ–∑–¥–∞–ª –æ–±—ä–µ–∫—Ç.


class Counter
{
  public static $count = 0;

  public function __construct()
  {
    self::$count++; // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
  }

  public static function getCount()
  {
    echo "<br>Total objects: " . self::$count . "\n";
  }
}

$first = new Counter();
$second = new Counter();

Counter::getCount(); // –í—ã–≤–µ–¥–µ—Ç: Total objects: 2


// –ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å User —Å static —Å–≤–æ–π—Å—Ç–≤–æ–º $userCount, –∫–æ—Ç–æ—Ä–æ–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ.

class Userss
{
  public static $userCount = 0;

  public function __construct()
  {
    self::$userCount++;
  }
  public static function getUsers()
  {
    echo "Total users: " . self::$userCount . "<br>";
  }
}

$user1 = new Userss();
$user2 = new Userss();
$user3 = new Userss();
$user4 = new Userss();

Userss::getUsers(); // 4


class Converter
{
  public static function celsiusToFahrenheit($celsius)
  {
    return $celsius * 1.8 + 32;
  }

  public static function sum($a, $b)
  {
    return $a + $b;
  }
}

echo Converter::celsiusToFahrenheit(25) . "\n"; // 77
echo Converter::sum(10, 15);                    // 25


// –ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å StringHelper —Å static –º–µ—Ç–æ–¥–æ–º greet($name), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å "Hello, <–∏–º—è>!".

class StringHelper
{
  public static function greet($name)
  {
    echo "Hello " . $name . '!';
  }
}

StringHelper::greet("Artur");

// 
// üî∑ 1. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã (interface)
// üìò –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ‚Äî —ç—Ç–æ –Ω–∞–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤ –±–µ–∑ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –∫–∞–∫ "–∫–æ–Ω—Ç—Ä–∞–∫—Ç".
// –ö–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –æ–±—è–∑–∞–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—Å–µ –µ–≥–æ –º–µ—Ç–æ–¥—ã.

// | –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å |
// –ú–æ–≥—É—Ç –±—ã—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞? | ‚ùå –ù–µ—Ç | 
// –ú–æ–≥—É—Ç –±—ã—Ç—å –º–µ—Ç–æ–¥—ã —Å —Ç–µ–ª–æ–º? | ‚ùå –ù–µ—Ç | 
// –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è? | ‚úÖ –î–∞ (implements) | 
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è | –ö–æ–Ω—Ç—Ä–∞–∫—Ç–∞ | 

interface AnimalInterface
{
  public function makeSound();
}

class Dogy implements AnimalInterface
{
  public function makeSound()
  {
    echo "Woof!\n";
  }
}

class Caty implements AnimalInterface
{
  public function makeSound()
  {
    echo "Meow!\n";
  }
}

$dog = new Dogy();
$cat = new Caty();

$dog->makeSound(); // Woof!
$cat->makeSound(); // Meow!


// üî∂ 2. –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã (abstract class)
// üìò –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å ‚Äî —ç—Ç–æ –ø–æ–ª—É–≥–æ—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å:

// –æ–±—ã—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π

// –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–±–µ–∑ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ ‚Äî –∫–∞–∫ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ)

// –ö–ª–∞—Å—Å —Å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é ‚Äî –µ–≥–æ –Ω–∞–¥–æ —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å.

// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å
// –ú–æ–≥—É—Ç –±—ã—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞? ‚úÖ –î–∞
// –ú–æ–≥—É—Ç –±—ã—Ç—å –º–µ—Ç–æ–¥—ã —Å —Ç–µ–ª–æ–º?‚úÖ –î–∞
// –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è? ‚ùå –ù–µ—Ç (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω extends)
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ë–∞–∑–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
abstract class Vehicle
{
  public $brand;

  public function __construct($brand)
  {
    $this->brand = $brand;
  }

  abstract public function start(); // –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥

  public function describe()
  {
    echo "This is a " . $this->brand . "\n";
  }
}



class Car extends Vehicle
{
  public function start()
  {
    echo $this->brand . " is starting...\n";
  }
}


class Car2 extends Vehicle
{
  public function start()
  {
    echo $this->brand . " is starting...\n";
  }
}
$car = new Car("Toyota");
$car->describe(); // This is a Toyota
$car->start();    // Toyota is starting...


// interface Shape —Å –º–µ—Ç–æ–¥–æ–º getArea() –∫–ª–∞—Å—Å Rectangle, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª–∏–∑—É–µ—Ç —ç—Ç–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
interface Shape
{
  public function getArea();
}


class Rectangle implements Shape
{
  public $a;
  public $b;

  public function __construct($a, $b)
  {
    $this->a = $a;
    $this->b = $b;
  }
  public function getArea()
  {
    return $this->a * $this->b;
  }
}

$shape = new Rectangle(2, 2);
echo $shape->getArea(2, 2) . "<br>";

//  üß© –ó–ê–î–ê–ù–ò–ï: –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
// –°–æ–∑–¥–∞–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å Transport, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç:

// üî∂ –°–≤–æ–π—Å—Ç–≤–∞:
// public $brand

// public $year

// üî∂ –ú–µ—Ç–æ–¥—ã:
// __construct($brand, $year) ‚Äî –æ–±—ã—á–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä

// abstract public function move(); ‚Äî –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥

// public function info() ‚Äî –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
// "Brand: <–º–∞—Ä–∫–∞>, Year: <–≥–æ–¥>"

// üß± –°–æ–∑–¥–∞–π –¥–≤–∞ –∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å–ª–µ–¥—É—é—Ç Transport:
// 1. Car:
// –†–µ–∞–ª–∏–∑—É–µ—Ç –º–µ—Ç–æ–¥ move(), –Ω–∞–ø—Ä–∏–º–µ—Ä: echo "The car is driving\n";

// 2. Bicycle:
// –†–µ–∞–ª–∏–∑—É–µ—Ç –º–µ—Ç–æ–¥ move(), –Ω–∞–ø—Ä–∏–º–µ—Ä: echo "The bicycle is pedaling\n";

abstract class Transport
{

  public $brand;
  public $year;

  public function __construct(string $brand, int $year)
  {
    $this->year = $year;
    $this->brand = $brand;
  }
  abstract public function move();

  public function info()
  {
    echo "Brand: " . $this->brand . "," . "Year: " . $this->year;
  }
}

class Kara extends Transport
{
  public function move()
  {
    echo "The car is driving\n";
  }
}

class Bicycle extends Transport
{
  public function move()
  {
    echo "The bicycle is pedaling\n";
  }
}

$kara = new Kara("Volvo", 1999);
$bicycle = new Bicycle("Trek", 2020);
echo $kara->move();
echo $kara->info();
echo $bicycle->move();
echo $bicycle->info();


// üîÅ –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º (–º–Ω–æ–≥–æ—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å)
// –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Ä–∞–∑–Ω—ã–µ –∫–ª–∞—Å—Å—ã —Ä–µ–∞–ª–∏–∑—É—é—Ç –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–ª–∏ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥, –Ω–æ –¥–µ–ª–∞—é—Ç —ç—Ç–æ –ø–æ-—Å–≤–æ–µ–º—É.

// –¢–æ –µ—Å—Ç—å: –æ–¥–∏–Ω –º–µ—Ç–æ–¥ ‚Äî –º–Ω–æ–≥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π.

interface Animals
{
  public function speak();
}

class Dogs implements Animals
{
  public function speak()
  {
    echo "Woof!\n";
  }
}

class Cats implements Animals
{
  public function speak()
  {
    echo "Meow!\n";
  }
}

function makeAnimalSpeak(Animals $animal)
{
  $animal->speak();
}

$dogs = new Dogs();
$cats = new Cats();

makeAnimalSpeak($dogs); // Woof!
makeAnimalSpeak($cats); // Meow!


// üß© –¢—Ä–µ–π—Ç—ã (traits)
// Trait ‚Äî —ç—Ç–æ –∫–∞–∫ –Ω–∞–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ "–≤–Ω–µ–¥—Ä–∏—Ç—å" –≤ –ª—é–±–æ–π –∫–ª–∞—Å—Å.

// üì¶ –£–¥–æ–±–Ω–æ, –∫–æ–≥–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–¥ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª–∞—Å—Å–∞—Ö, –Ω–æ –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (–≤ PHP —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ extends, –∞ —Ç—Ä–µ–π—Ç–æ–≤ –º–æ–∂–Ω–æ —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ).

trait Logger1
{
  public function log($message)
  {
    echo "[LOG]: $message\n";
  }
}

class User
{
  use Logger1;

  public function create()
  {
    $this->log("User created");
  }
}

class Product
{
  use Logger1;

  public function update()
  {
    $this->log("Product updated");
  }
}

$user = new User();
$user->create(); // [LOG]: User created

$product = new Product();
$product->update(); // [LOG]: Product updated
